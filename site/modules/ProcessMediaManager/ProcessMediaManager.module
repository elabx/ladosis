<?php namespace ProcessWire;

/**
* Media Manager: Process
*
* Ajax driven full media manager for audio, document, image and video files.
* Enables the creation of a digital media library. Features include
*	- Lightning-fast searches of your media library
*	- Preview of audio, image and video medial
*	- Create variations of images
*	- Media tagging and descriptions
*	- Beautiful easy to use interface
*
* @author Francis Otieno (Kongondo)
*
* This is a Copyrighted Commercial Module. Please do not distribute or host publicly. The license is not transferable.
*
* ProcessMediaManager for ProcessWire
* Copyright (C) 2015 by Francis Otieno
* Licensed under a Commercial Licence (see README.txt)
*
* @permission Permission 'media-manager':			This permission allows the user to access/view Media Manager.
*													The permission is automatically created when the module is installed.
* @permission Permission 'media-manager-settings':	This permission allows the user to edit media manager upload settings.
*													The permission is automatically created when the module is installed.
*
* -----------------------------------------------------------------------------------------------------------------------------------
* Custom Permissions. @note: These permissions kick in only if present. Create them and assign them to roles if you need to use them.
* -----------------------------------------------------------------------------------------------------------------------------------
*
* @permission Permission 'media-manager-upload':	This permission allows the user to upload media to the media library.
* @permission Permission 'media-manager-publish': 	This permission allows the user to (un)publish media in the media library.
* @permission Permission 'media-manager-lock': 		This permission allows the user to (un)lock media in the media library.
* @permission Permission 'media-manager-delete': 	This permission allows the user to trash or delete media in the media library.
*													It does not apply to media in 'draft/review/temporary' folder.
* @permission Permission 'media-manager-edit': 		This permission allows the user to edit media (cropping, resizing, renaming, enter descriptions and tags, etc.) in the media library.
*
*
*/

class ProcessMediaManager extends ProcessPageLister implements Module {

	/**
	 * Return information about this module (required).
	 *
	 * @access public
	 * @return array of information.
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Media Manager (Process)',
			'author' => 'Francis Otieno (Kongondo)',
			'version' => 12,
			'href' => 'http://mediamanager.kongondo.com',
			'summary' => 'A rich visual ajax-driven Media Manager for Audio, File, Image and Video types.',
			'singular' => true,
			'autoload' => false,
			'permission' => 'media-manager',
			'installs' => array('FieldtypeMediaManager', 'MediaManagerImageEditor'),
			'requires' => 'JqueryFileUpload',
		);

	}

	const PAGE_NAME = 'media-manager';// this process' name

	protected $currentPage;
	protected $mediaManagerField;

	protected $globalAllowedMedia;// for checking disallowed global media
	protected $mediaTypeStr;// audio|document|image|video
	protected $mediaUploadsDir;
	protected $mediaUploadsURL;
	protected $privateMediaUploadsDir;
	protected $scansDir;
	protected $extraCSSClass; // theme specific CSS Classes (e.g. AdminThemeReno)
	protected $templateSelector;
	protected $segs = array();
	protected $urlSeg1;
	protected $urlSeg2;
	protected $urlSeg3;
	protected $blueimpGalleryContainerID;// for blueimp gallery; container ID for previews
	protected $uploadAnywhere;// to check if can upload anywhere if the setting is on

	// for external Classes that extend or are referenced in this module
	protected $mmRender;
	protected $mmUtilities;
	protected $jfu;

	// user @access-control => permissions
	protected $noPublish;// user cannot (un)publish
	protected $noLock;// cannot (un)lok
	protected $noDelete;// cannot trash/delete
	protected $noEdit;// cannot edit
	protected $noSettings;// cannot save settings
	protected $noUpload;// cannot upload/scan (hence cannot create media)


	/* ######################### - SET UP - ######################### */

	/**
	 * Set some key properties for use throughout the class.
	 *
	 * @access public
	 *
	 */
    public function __construct() {



		/******** - PERMISSIONS CHECK - *******/
		$permissions = $this->wire('permissions');
		$user = $this->user;
		$this->noPublish = $permissions->get('media-manager-publish')->id && !$user->hasPermission('media-manager-publish') ? true : false;
		$this->noLock = $permissions->get('media-manager-lock')->id && !$user->hasPermission('media-manager-lock') ? true : false;
		$this->noDelete= $permissions->get('media-manager-delete')->id && !$user->hasPermission('media-manager-delete') ? true : false;
		$this->noEdit = $permissions->get('media-manager-edit')->id && !$user->hasPermission('media-manager-edit') ? true : false;
		$this->noSettings = $permissions->get('media-manager-settings')->id && !$user->hasPermission('media-manager-settings') ? true : false;
		$this->noUpload = $permissions->get('media-manager-upload')->id && !$user->hasPermission('media-manager-upload') ? true : false;


		/******** - SCRIPTS AND STYLES - *******/

		$config = $this->wire('config');
		$input = $this->wire('input');

		// ProcessLister styles and scripts
		$url = $config->urls->ProcessPageLister;
		$config->styles->add($url . "ProcessPageLister.css");
		$config->scripts->add($url . "ProcessPageLister.js");

		// Media Manager shared styles and scripts
		$url = $config->urls->ProcessMediaManager;
		$config->styles->add($url . "MediaManager.css");
		$config->scripts->add($url . "MediaManager.js");

		/******** - UPLOADS DIRECTORIES - *******/

		$this->mediaUploadsDir = $config->paths->assets . 'MediaManager/';
		$this->mediaUploadsURL = $config->urls->assets . 'MediaManager/';

		$files = $this->wire('files');
		// by default, we (jfu) upload to a non-accessible folder
		$this->privateMediaUploadsDir = $this->mediaUploadsDir . 'jqfu/.files_no_show/';
		if(!is_dir($this->privateMediaUploadsDir)) $files->mkdir($this->privateMediaUploadsDir, true);

		// create scans 'uploads' directory if it doesn't exist
		$this->scansDir = $this->mediaUploadsDir . 'uploads/';
		if(!is_dir($this->scansDir)) $files->mkdir($this->scansDir, true);


		/******** - MEDIA MANAGER SETTINGS - *******/
		$path = $config->urls->admin . 'media-manager/';
		$mediaManagerSettings = $this->wire('pages')->get("template=media-manager-settings, parent={$path},include=hidden")->media_manager_settings;
		$savedSettings = json_decode($mediaManagerSettings, true);
		if(!is_array($savedSettings)) $savedSettings = array();

		// if unzipping files is not yet set/saved, we default to true (unzip)
		if(!isset($savedSettings['unzip_files'][0])) $savedSettings['unzip_files'][0] = 1;

		$this->savedSettings = $savedSettings;

		// set global allowed media here
		$media = array('audio', 'document', 'image', 'video');
		$this->globalAllowedMedia = isset($savedSettings['allowed_media']['media']) ? $savedSettings['allowed_media']['media'] : $media;
		// set disable 'All' media view (no 'All' in menu)
		$this->disableAllMediaView = false;
		if(isset($savedSettings['disable_all_media_view'][0]) && 1 === (int)$savedSettings['disable_all_media_view'][0]) {
			$this->disableAllMediaView = true;
		}

		// Blueimp Gallery
		$this->blueimpGalleryContainerID = 'processmediamanager-blueimp-gallery';

		parent::__construct();


		/******** - LISTER SETTINGS - *******/

		$this->set('limitFields', array());
		$this->set('toggles', array());
		$this->set('defaultSort', '');// field to sort by; default is '-modified'
		$this->set('allowBookmarks', '');
		$this->set('initSelector', '');

		$this->extraCSSClass = $this->adminTheme == 'AdminThemeReno' ? 'Reno' : '';

		// include helper classes
		$dir = dirname(__FILE__);
		require_once("$dir/MediaManagerRender.php");
		require_once("$dir/MediaManagerUtilities.php");
		require_once("$dir/MediaManagerActions.php");

		###########

		$sanitizer = $this->wire('sanitizer');
		$urlSeg1 =  $sanitizer->pageName($input->urlSegment1);
		$urlSeg2 = $input->urlSegment2;// current pageID - current fieldID combo {joined by hyphen}
		// split $urlSeg2 to get currentPageID and mediaManagerFieldID
		$IDs = explode('-', $urlSeg2 );
		$currentPageID =  isset($IDs[0]) ? (int) $IDs[0] : '';
		$mediaManagerFieldID = isset($IDs[1]) ? (int) $IDs[1] : '';

		// @note: just setting some defaults to avoid errors
		$this->currentPage = new WireData();
		$this->mediaManagerField = new WireData();


		// if in add [insert] media to InputfieldMediaManager mode (modal)
		// we need these to send to config->js
		if($currentPageID && $mediaManagerFieldID) {
			// get the current page
			$p = $this->wire('pages')->get($currentPageID);
			if($p && $p->id > 0) $this->currentPage = $p;
			else throw new WireException($this->_('No page found to add media to!'));
			// get the current media field (FieldtypeMediaManager/InputfieldMediaManager) on this page
			$f = $this->wire('fields')->get($mediaManagerFieldID);
			if($f && $f->id && $f->type instanceof FieldtypeMediaManager) $this->mediaManagerField = $f;
			else throw new WireException($this->_('No instance of FieldtypeMediaManager found in the current page!'));
		}

		// set upload anywhere setting
		$this->uploadAnywhere = false;
		if(
			(isset($savedSettings['upload_anywhere'][0]) &&
			1 == $savedSettings['upload_anywhere'][0]) &&
			(!$this->noUpload) &&
			(!in_array($urlSeg1,array('filters','upload','settings','cleanup')))
		) {
			$this->uploadAnywhere = true;
		}

	}

	/**
	 * Initialise the module. This is an optional initialisation method called before any execute methods.
	 *
	 * Initialises various class properties ready for use throughout the class.
	 *
	 * @access public
	 *
	 */
	public function init() {

		// @access-control: media-manager
		if ($this->wire('permissions')->get('media-manager')->id && !$this->user->hasPermission('media-manager'))
			 throw new WirePermissionException($this->_('Media Manager: You have no permission to use this module.'));

		parent::init();

		$modules = $this->wire('modules');
		$this->ajaxConfigs();


		$modules->get("Jquery");
		$ui = $modules->get("JqueryUI");
		$ui->use("modal");
		$modules->get("JqueryMagnific");

		$this->mmRender = new MediaManagerRender($this->currentPage, $this->mediaManagerField);
		$this->mmUtilities = new MediaManagerUtilities($this->currentPage, $this->mediaManagerField);
		$this->jfu = new JqueryFileUpload();
		#$this->jfu = $this->wire('modules')->get('JqueryFileUpload');

		$config = $this->wire('config');
		$url = $config->urls->$this;
		$sanitizer = $this->wire('sanitizer');

		// get sanitised url segments
		$urlSegments = $this->mmUtilities->getURLSegments();
		$this->urlSeg1 = $urlSeg1 =  $urlSegments[0];
		$this->urlSeg2 = $urlSeg2 =  $urlSegments[1];
		$this->urlSeg3 = $urlSeg3 =  $urlSegments[2];

		/******** - JQUERY FILE UPLOAD SCRIPTS AND STYLES - *******/

		// only output jfu scripts and styles when on upload page
		// @todo: revisit this. if NO upload anywhere, then scripts should only be ouput on 'upload' page! + combine with below
		/* if(($urlSeg1 == 'upload') || ($urlSeg1 == 'add' && $urlSeg3 == 'upload') || ($urlSeg1 == 'link' && $urlSeg2 == 'upload') || ($urlSeg1 == 'rte' && $urlSeg2 == 'upload')) { */
			$this->jfu->configJFUScripts();// jqueryfileupload scripts (config->scripts->add())
			$this->jfu->configJFUStyles();
		#}

		/******** - JQUERY BLUEIMP GALLERY SCRIPTS AND STYLES - *******/

		// needed for gallery preview of images (using blueimp instead of magnific due to touch support
		// add widget container in all execute pages except  cleanup and settings
		if(!in_array($urlSeg1, array('cleanup', 'settings'))) {
			$jfuURL = $config->urls->JqueryFileUpload;
			$config->scripts->add($jfuURL . "js/gallery/jquery.blueimp-gallery.min.js");
			$config->scripts->add($jfuURL . "js/gallery/blueimp-gallery-audio.js");
			$config->scripts->add($jfuURL . "js/gallery/blueimp-gallery-pdf.js");
			$config->scripts->add($jfuURL . "js/gallery/blueimp-gallery-video.js");
			$config->styles->add($jfuURL . 'css/blueimp-gallery.min.css');
		}

		/******** - JQUERY FILE UPLOAD CONFIG SETTINGS - *******/
		$this->jfu->configsJFU($this->mmUtilities->getConfigsJFUOptions($this->uploadAnywhere));


		/******** - WIRETABS INITIALIZE - *******/

		$modules->get('JqueryWireTabs');

		/******** - SELECTORS FOR LISTER STUFF - *******/

		$noListerArray = array('upload', 'settings', 'cleanup');
		// set lister properties only in right contexts
		if(!in_array($urlSeg1, $noListerArray) && !in_array($urlSeg3, $noListerArray)) {
			// check if in 'add to InputfieldMediaManager mode'
			// if yes: check if there are disallowed media types
			// if yes: remove them from find selector
			$allowedMedia = $this->mediaManagerField && !is_null($this->mediaManagerField->allowedMedia) ? $this->mediaManagerField->allowedMedia : NULL;

			// grab selector and other lister settings
			$options = $this->mmUtilities->buildSelector($allowedMedia, $this->savedSettings);

			$this->mediaTypeStr = $options['seg'];


			/******** - LISTER SETTINGS - *******/


			// limit system fields to only the following. We don't need templates since these should be fixed for each media type respectively
			/*$limitFields = array('title', 'id', 'name', 'status', 'modified','created','published','modified_users_id','created_users_id', 'limit', 'sort', 'subfields', 'include', '_custom', $mediaField);
			// set fields to show @todo: we leave this out for now since it seems to also affect subfields
			$this->set('limitFields', $options['limitFields']);
			*/

			### custom settings, overriding lister defaults ###
			// From parent:: @property array $toggles One or more of: collapseFilters, collapseColumns, noNewFilters, disableColumns, noButtons [empty]
			// toggles: collapseFilters, collapseColumns, noNewFilters, disableColumns, noButtons

			// we don't need columns in our renderResults(); we are not using tabulated results
			$this->set('toggles', $options['toggles']);// array

			$this->set('defaultSort', $options['defaultSort']);// field to sort by; default is '-modified'
			$this->set('allowBookmarks', $options['allowBookmarks']);

			// the default selector string that appears but MAY be removed or changed [title%=]
			$this->set('defaultSelector', $options['defaultSelector']);// we don't really need to select by template

			// initial selector (that user cannot change)
			// Weed out admin pages + the current page => no admin children; no admin; no trash, no current page and no 404 page
			#$this->set('initSelector', "id!=7, id!=2, id!=27, limit=$limit, $mediaSelector");
			$this->set('initSelector', $options['initSelector']);

		}



	}

	/* ######################### - EXECUTE PAGES - ######################### */

	/**
	 * This function is executed when a page with this Process (MM) assigned is accessed.
	 *
	 * Displays all media available in the media library as well as their edit form.
	 *
	 * @access public
	 * @return string $out Markup of display of media.
	 *
	 */
	public function execute() {

		// @note: if only 1 allowed global media OR 'All' media view is disabled, just redirect to the only OR first available view! e.g. audio

		if((1 == count($this->globalAllowedMedia)) || ($this->disableAllMediaView)) {
			$singleMedia = $this->globalAllowedMedia;
			//$singleMedia =  reset($singleMedia);
			$this->session->redirect($this->wire('page')->url . "{$singleMedia[0]}/");
		}



		$out = $this->mmRender->renderMediaViewsTopPanel() . parent::execute();
		$out = $this->getWRapper($out);
		return $out;
	}

	/**
	 * Show audio media.
	 *
	 * We append our actions panel and use the page to filter, search for and select audio media to action.
	 *
	 * @access public
	 * @return string $out Markup of rendered audio media results, menu and action panel.
	 *
	 */
	public function executeAudio() {
		$out = $this->mmRender->renderMediaViewsTopPanel() . parent::execute();
		$out = $this->getWRapper($out);
		return $out;
	}

	/**
	 * Show document media.
	 *
	 * We append our actions panel and use the page to filter, search for and select document media to action.
	 *
	 * @access public
	 * @return string $out Markup of rendered document media results, menu and action panel.
	 *
	 */
	public function executeDocument() {
		$out = $this->mmRender->renderMediaViewsTopPanel() . parent::execute();
		$out = $this->getWRapper($out);
		return $out;
	}

	/**
	 * Show image media.
	 *
	 * We append our actions panel and use the page to filter, search for and select image media to action.
	 *
	 * @access public
	 * @return string $out Markup of rendered image media results, menu and action panel.
	 *
	 */
	public function executeImage() {
		$out = $this->mmRender->renderMediaViewsTopPanel() . parent::execute();
		$out = $this->getWRapper($out);
		return $out;
	}

	/**
	 * Show video media.
	 *
	 * We append our actions panel and use the page to filter, search for and select media to action.
	 *
	 * @access public
	 * @return string $out Markup of rendered video media results, menu and action panel.
	 *
	 */
	public function executeVideo() {
		$out = $this->mmRender->renderMediaViewsTopPanel() . parent::execute();
		$out = $this->getWRapper($out);
		return $out;
	}

	/**
	 * Show upload form.
	 *
	 * Consists of tabs for jfu files widget, scan, and uploads' help.
	 *
	 * @access public
	 * @return string $out Markup of rendered upload interface.
	 *
	 */
	public function executeUpload() {
		// @access-control: media-manager-upload
		if($this->noUpload) $this->session->redirect($this->wire('page')->url);
		return $this->mmRender->renderMediaViewsTopPanel() . $this->mmRender->renderUploadForm($this->savedSettings);
	}

	/**
	 * Show settings form.
	 *
	 * Consists of various inputs for in/outputting Media Manager settings.
	 *
	 * @access public
	 * @return string $out Markup of rendered settings form.
	 *
	 */
	public function executeProfiles() {

		$text = '<h2>Create and Edit Profiles</h2>';
		$text .= '<p>This is now its own page. A number of things have been combined. It will be a mash of what we have in Blog and Menu Builder. The dash is a simple 4 column Table (@see below). There is a discrete link above to create a new profile. Below that we have the table. Clicking on a Profile titlle opens a modal with a url segment for this page (alternatively, maybe open in new page: problem then are backlinks + consistency)>. To edit, people have been opening modals. So, we open a modal. Check the Blog one. <strong>@note: Currently, we are using executeFilter(). Change back to that? Also, maybe change label config to filters? </strong></p>';

		$text .= '<p>Make this attractive. No fieldsets please!</p>';

		$text .= '<p><strong>Table:</strong> I am thinking four columns as below. Let us use UIKIT table here, including responsiveness</p>';
		$text .=
			'<ul>'.
				'<li>Title</li>' .
				'<li>Code (unsure about this?)</li>' .
				'<li>Locked</li>' .
				'<li>Checkbox</li>' .
			'</ul>';

		$text .= '<p><strong>Action Buttons</strong> I am thinking to use a combined button that will have the following actions: set active, lock, delete</p>';

		$text .= '<p><strong>Saving</strong> We use normal POST as in settings. We already have the code; reuse! + have a look at last release of MM since the actionProfiles here is now broken. Have at the old code to see how logic was working, especially with checking active, checking if name already exist when creating new, etc.</p>';

		$text .= '<p><strong>JS/CSS</strong> Nothing much to do for CSS. We use UIKIT. For JS. Just the select all checkbox toggle. @see how we did it in Uploads/Scan. Then DELETE the older JS I brough in yesteday. For Code in table, use preformated text like ProcessWire does! Or just add CSS class there!</p>';

		$text .= '<p><strong>Locked Status</strong> If locked show locked padlock icon. Otherwise, show nothing. Or? Alternatively, Yes/No will do, but try padlock first.</p>';


		$createNewFilterText = "<a href='/b/blog/posts/add/?&amp;modal=1' title='Quick Post' class='editBlog pw-modal pw-modal-medium'><i class='fa fa-fw fa-plus-circle'></i>Add Profile</a>";

		$rows = '';
		$filters = array(
			'editors'=>array('title'=>'Editors', 'defaultSelector'=>'title%=Yellow, media_manager_image.description%=Cab', 'locked'=>1),
			'admin'=>array('title'=>'Admin', 'defaultSelector'=>'title%=Yellow, media_manager_image.description%=Cab', 'locked'=>0),
			'images'=>array('title'=>'Images', 'defaultSelector'=>'title%=, template=47', 'locked'=>0),
			'important-documents'=>array('title'=>'Important Documents', 'defaultSelector'=>'title%=, template=46, media_manager_document.tags%=Important', 'locked'=>1)

		);

		$activeFilter = 'admin';

		foreach($filters as $filterName => $value) {
			$rows .= "<tr>";
			foreach ($value as $k => $v) {
				if($k == 'defaultSelector') $td = "<code>{$v}</code>";
				elseif($k == 'locked') {
					$td = $v ? "<span class='fa fa-lock mm_locked'></span>" : '';
				}
				else {
					$filterTitle = $filterName == $activeFilter ? $v ." <small class='mm_active_filter'>(active)</small>" : $v;
					$edit =
					"<a href='/sp/media-manager/filter/?modal=1' id='_MediaManagerFiltersConfigTab' class='pw-modal pw-modal-medium'>{$filterTitle}</a>";
					/*"<a href='{$this->wire('page')->url}profiles/{$filterName}/?modal=1' class='ui-helper-clearfix mm_edit_filter pw-modal pw-modal-medium'>$filterTitle</a>";*/
					$td = $edit;
				}
				$rows .= "<td>" . $td . "</td>";
			}
			$rows .= "<td data-profile='{$filterName}'><input type='checkbox' class='uploaded_file toggle uk-checkbox uk-form-controls-text'></td>";
			$rows .= "</tr>";
		}

		$table =
		"\n\t<div class='uploaded-to-scan-files-list uk-overflow-auto uk-width-1-1'>".
			$createNewFilterText .
            "<table id='mm_scan_list' role='presentation' class='scan_files_list uk-table uk-table-divider uk-table-hover uk-table-justify uk-table uk-table-middle uk-table-responsive'>".
                "<thead>" .
                    "<tr>" .
                        "<th class='uk-width-medium'>" . $this->_('Title') . "</th>" .
                        "<th class='uk-table-expand'>" . $this->_('Code') . "</th>" .
                        "<th class='uk-width-small'>" . $this->_('Locked') . "</th>" .
                        "<th class='uk-width-small'>" .
                            "<input type='checkbox' class='toggle_all uk-checkbox uk-form-controls-text' title='Select All'>".
                        "</th>" .
                    "</tr>" .
                "</thead>" .
                "\n\t\t<tbody id='scan-files'>{$rows}</tbody>\n".
            "\t</table></div>\n";

		$out = $this->mmRender->renderMediaViewsTopPanel() . $text .$table;

		return $out;

	}

	/**
	 * Shows filter configurations profile page.
	 *
	 * This is rendered in a modal.
	 * Enables the creation, setting and editing of filter profiles
	 *
	 * @access public
	 * @return string $out Markup of filter profiles form.
	 *
	 */
	public function executeFilters() {
		$out = $this->mmRender->renderMediaViewsTopPanel();
		$savedSettings = $this->savedSettings;
		// redirect to MM home page just in case filters page accessed directly in browser and filter profiles set not to be shown
		if(!isset($savedSettings['show_filter_profiles'][0]) || $savedSettings['show_filter_profiles'][0] == 2) {
			$this->session->redirect($this->wire('page')->url);
		}
		if($this->urlSeg2) $out = $this->mmRender->renderFilterConfigEdit();
		else $out .= $this->mmRender->renderFilterConfig();
		return $out;
	}

	/**
	 * Show settings form.
	 *
	 * Consists of various inputs for in/outputting Media Manager settings.
	 *
	 * @access public
	 * @return string $out Markup of rendered settings form.
	 *
	 */
	public function executeSettings() {
		$out = $this->mmRender->renderMediaViewsTopPanel() . $this->mmRender->renderSettings($this->savedSettings);
		if($this->noSettings) {
			$settingsLockedWarning = $this->_('Media Manager: These settings are locked for edits. View access only.');
			$this->warning($settingsLockedWarning);
		}
		return $out;
	}

	/**
	 * Single Page opened for editing via either MM modal or in normal MM.
	 *
	 * Uses 'in-page-edit' of ProcessPageEdit.
	 *
	 * @access public
	 * @return string $out Markup of page edit form.
	 *
	 */
	public function executeEdit() {

		// @todo? change the title in the modal? i.e. from 'Edit Page' to 'Edit Media'? Seems to be set in the ui dialog?

		$editMediaID = (int) $this->wire('input')->get->id;
		// @note: since we are using get(), we have no issues with access for non-superusers
		$editMedia = $this->wire('pages')->get($editMediaID);
		$session = $this->wire('session');

		if($editMedia && $editMedia->id > 0) {
			$currAdminPage = $this->wire('page');
			$this->fuel->page = $editMedia;
			$editForm = $this->wire('modules')->ProcessPageEdit->execute();
			$this->fuel->page = $currAdminPage;

			// sessions to track $currentPage->id and $pageField->id in case this page will be deleted
			$session->set('mmCurrentPageID', $this->currentPage->id);
			$session->set('mmFieldID', $this->mediaManagerField->id);
			$session->set('mmUrlSeg3', $this->urlSeg3);

			// back link to show all selectable media
			$out = $this->mmRender->renderModalSinglePageEditActions($editMedia);

			// if ajax (files/images upload) don't interfere @note: if not checked, affects uploads
			if ($this->config->ajax) return $editForm;
			// otherwise append custom content
			else return $out . $editForm;
		}

		// page deleted or unreachable: determine if redirecting to 'media items'
		else {

			/* @note:

			*** BACKLINK STRUCTURE ***

				IN 'all' media as origin:
				http://mediamanager.pw3/admin/media-manager/add/1138-118/?modal=1

				IN 'image' media as origin:
				http://mediamanager.pw3/admin/media-manager/add/1138-118/image/?modal=1

			*/

			$urlSeg3 = $session->get('mmUrlSeg3');
			// if we have a value here, we are in 'back to all media items' context
			if($urlSeg3) {
				/*
					we redirect using a url like this one:
					- http://mediamanager.pw3/admin/media-manager/add/1138-118/?modal=1
				*/
				// these two form urlSeg2
				$currentPageID = $session->get('mmCurrentPageID');
				$mediaManagerFieldID = $session->get('mmFieldID');
				// urlSeg3 cleanup
				$urlSeg3 = str_replace('add-', '', $urlSeg3);
				// if something remaining in string, we append it as urlSeg3, otherwise we came to edit via 'all media' dash
				$urlSeg3 = strlen($urlSeg3) ? "{$urlSeg3}/" : "";
				$url = "{$this->wire('page')->url}add/{$currentPageID}-{$mediaManagerFieldID}/{$urlSeg3}?modal=1";
				$this->wire('session')->redirect($url);
			}
			else {
				// javascript will close the window
				// but we also display a message, just in case, e.g. 'media deleted. please close modal'
				//in js, we also remove all occurences of the media, including variations and accross multiple MM inputfields on the page! we use the data-delete value on the submit_copy button!
				$out = $this->_('Media deleted. Please close this window if it did not close automatically') . '...';
				return $out;
			}
		}

	}

	/**
	 * Landing modal page for adding media to a page being edited.
	 *
	 * Add (insert) and Upload are the only actions here.
	 * Add adds selected media to the current page.
	 * Upload adds media to the Media Library.
	 *
	 * @access public
	 * @return string $out Markup of rendered results for adding to a page.
	 *
	 */
	public function executeAdd() {

		// if page accessed directly (i.e. no curentPageID-mediaManagerFieldID in urlSeg2, redirect to MM home page)
		if(!$this->urlSeg2) $this->session->redirect($this->wire('page')->url);

		// show respective media types OR upload
		// else ( i.e., no urlSegment or urlSegment unknown or urlSegment1 == all) show all media
		if($this->urlSeg3 == 'audio') 			$out = $this->executeAudio();
		elseif($this->urlSeg3 == 'document')	$out = $this->executeDocument();
		elseif($this->urlSeg3 == 'image')		$out = $this->executeImage();
		elseif($this->urlSeg3 == 'video')		$out = $this->executeVideo();
		elseif($this->urlSeg3 == 'upload')		$out = $this->executeUpload();
		elseif($this->urlSeg3 == 'settings')	$out = $this->executeSettings();
		else $out = $this->mmRender->renderMediaViewsTopPanel() . parent::execute();

		$out = $this->getWRapper($out);// wrap in div.mm_main_wrapper

		return $out;

	}

	/**
	 * Landing modal page for adding image media variations to a page being edited.
	 *
	 * Add (insert) is the only action here.
	 * Adds selected media to the current page.
	 *
	 * @access public
	 * @return string $out Markup of rendered results for adding variation(s) to a page.
	 *
	 */
	public function executeVariations() {
		$out = $this->mmRender->renderModalVariations();
		$out = $this->getWRapper($out);// wrap in div.mm_main_wrapper
		return $out;
	}

	/**
	 * Landing modal page for selecting image media for adding to CKEditor textarea.
	 *
	 * There are no actions here.
	 * On selection, ProcessPageEditImageSelect takes control.
	 *
	 * @access public
	 * @return string $out Markup of rendered image media to insert in a page.
	 *
	 */
	public function executeRte() {
		if($this->urlSeg2 == 'upload') $out = $this->executeUpload();
		elseif($this->urlSeg2 == 'settings') $out = $this->executeSettings();
		else $out = $this->executeImage();
		$out = $this->getWRapper($out);// wrap in div.mm_main_wrappr
		return $out;
	}

	/**
	 * Landing modal page for selecting media link for adding to CKEditor textarea.
	 *
	 * There are no actions here.
	 * On selection, ProcessPageEditLink takes some control.
	 *
	 * @access public
	 * @return string $out Markup of rendered media to insert as links in a page.
	 *
	 */
	public function executeLink() {
		if($this->urlSeg2 == 'upload') $out = $this->executeUpload();
		elseif($this->urlSeg2 == 'settings') $out = $this->executeSettings();
		else $out = $this->mmRender->renderMediaViewsTopPanel() . parent::execute();
		$out = $this->getWRapper($out);// wrap in div.mm_main_wrapper
		return $out;
	}

	/**
	 * Cleanup markup.
	 *
	 * Superusers only.
	 * Removes all Media Manager components (fields, templates, template file and pages).
	 * Needs to be used before uninstalling the module for a clean uninstall.
	 *
	 * @access public
	 * @return string $out Markup of cleanup.
	 *
	 */
	public function executeCleanup() {
		if (!$this->user->isSuperuser()) {
			$this->error($this->_("Sorry you cannot view that page. Only Superusers allowed access."));
			$this->session->redirect($this->wire('page')->url);// redirect to main media maanager page
		}
		$out = $this->mmRender->renderMediaViewsTopPanel() . $this->mmRender->renderCleanup();
		return $out;
	}

	/* ######################### - AJAX - ######################### */

	/**
	 * Outputs javascript configuration values for this module.
	 *
	 * @access protected
	 * @return string $scripts.
	 *
	 */
	protected function ajaxConfigs() {

		$currentPageID = $this->currentPage ? (int) $this->currentPage->id : '';
		$mediaManagerFieldID = '';
		$currentFieldInsertAndClose = '';
		if($this->mediaManagerField) {
			$mediaManagerFieldID = (int) $this->mediaManagerField->id;
			$currentFieldInsertAndClose = (int) $this->mediaManagerField->insertAndClose;
		}

		$url = $this->wire('config')->urls->admin . 'media-manager/ajax/';

		// translatable error/success messages for use in JS
		$unknownError = $this->_('Media Manager: Error encountered. Request could not be completed.');
		$noAction = $this->_('Media Manager: You need to select an action to apply.');
		$noSelection = $this->_('Media Manager: You need to select at least one media before applying an action.');
		$noTag = $this->_('Media Manager: You need to enter at least one tag to apply.');
		$noInsert = $this->_('Media Manager: You need to select at least one media to insert in page.');
		$noMediaToAdd = $this->_('Media Manager: You need to upload your media before you try to add them to the Media Library.');
		$invalidFilter = $this->_('Media Manager: A filter with that title already exists. Please amend and try again.');
		$savedFilter = $this->_('Media Manager: Filter settings saved.');
		$jfuAnywhereUploadSuccess = $this->_('Media Manager: Media successfully uploaded');
		$jfuAnywhereUploadFail = $this->_('Media Manager: Some media could not be uploaded');
		$deleteFail = $this->_('Media Manager: Failed to delete files');
		$moveToLibraryFail = $this->_('Media Manager: Media could not be moved to Media Library');

		$session = $this->wire('session');
		$tokenName = $session->CSRF->getTokenName();
		$tokenValue = $session->CSRF->getTokenValue();

		// options for ajax calls
		$options = array('config' =>
			array(
				'mediaManagerContext' => 'ProcessMediaManager',
				'currentPageID' => $currentPageID,
				'mediaManagerFieldID' => $mediaManagerFieldID,
				'ajaxURL' => $url,
				'insertAndClose' => $currentFieldInsertAndClose,
				'urlSeg1' => $currentFieldInsertAndClose,
				'unknownError' => $unknownError,
				'noAction' => $noAction,
				'noSelection' => $noSelection,
				'noTag' => $noTag,
				'noInsert' => $noInsert,
				'noMediaToAdd' => $noMediaToAdd,
				'invalidFilter' => $invalidFilter,
				'savedFilter' => $savedFilter,
				// @note: for our JFU 'anywhere upload'
				'jfuFileUploadID' => "mm_thumbs_wrapper_{$currentPageID}_{$mediaManagerFieldID}",
				'jfuAnywhereUploadSuccess' => $jfuAnywhereUploadSuccess,
				'jfuAnywhereUploadFail' => $jfuAnywhereUploadFail,
				'deleteFail' => $deleteFail,
				'moveToLibraryFail' => $moveToLibraryFail,
				'uploadAnywhere' => $this->uploadAnywhere,
				'formData' => array($tokenName => $tokenValue),
			)
		);

		//$scripts = $this->wire('config')->js($this->className(), $options);
		// @note: we changed this from config.ProcessMediaManager TO Just 'config.MediaManager' so we can share config with InputfieldMM.js
		$scripts = $this->wire('config')->js('MediaManager', $options);

		return $scripts;

	}

	/**
	 * A URL for receiving ajax calls and passing these on for processing.
	 *
	 * Actions include editing, inserting in page (adding) uploading, scanning, (un)publishing, (un)locking, trashing or deleting media.
	 *
	 * @access public
	 * @return string $data JSON-encoded string.
	 *
	 */
	public function executeAjax() {

		if ($this->wire('config')->ajax) {

			$data = array();// for our JSON to feed back
			$data2 = array();// for messages from creating media. Will merge with $data
			$media = array();// media to action selected (i.e. the pages themselves) or uploaded
			$publish = 0;
			$options = array();// various options for action methods

			// determine whodunnit
			$input = $this->wire('input')->post;

			############################################

			## grab and sanitize sent inputs
			$media = $input->media;// array
			// type of action (see below)
			$actionType = $input->action;
			// @note: extra action for Inputfield MM upload anywhere and insert in field
			$actionType2 = $input->action2;
			$scan = (int) $input->scan;
			$currentPageID = (int) $input->current_page_id;// current page id (for insert mode)
			$mediaManagerFieldID = (int) $input->current_media_manager_field_id;// current FieldtyepMediaManager field on the current page (for insert mode)
			$tagMode = (int) $input->tag_mode;// 0=update existing tags; 1=replace existing tags

			############### - jfu stuff - ###############
			$uploads = isset($_FILES['files']) && count($_FILES['files']) ? true : false;
			$list = $this->wire('sanitizer')->name($input->jfu_list);
			// @note: shared between jfu 'move uploads' and MM 'scan uploaded'
			$moveToMediaLibrary = $this->wire('sanitizer')->pageName($input->jfu_move);
			// @note: shared between jfu 'delete uploads' and MM 'delete scan uploaded'
			$delete = $this->wire('sanitizer')->pageName($input->jfu_delete);
			#############################################

			$this->mmActions = new MediaManagerActions();

			// dealing with non-upload actions (publish, trash, etc)
			if(is_array($media) && count($media)) {

				// insert media into a MM Inputfield or edit media that is in this MM Inputfield
				if($actionType == 'insert' || $actionType == 'edit') {
					// get the current page
					$p = $this->wire('pages')->get($currentPageID);
					if($p && $p->id > 0) $this->currentPage = $p;
					else {
						$data['message'] = 'error';
						$data['error'] = $this->_('No page found for the media!');
					}
					// get the current media field (FieldtypeMediaManager/InputfieldMediaManager) on this page
					$f = $this->wire('fields')->get($mediaManagerFieldID);
					if($f && $f->id && $f->type instanceof FieldtypeMediaManager) $this->mediaManagerField = $f;
					else {
						$data['message'] = 'error';
						$data['error'] = $this->_('No instance of FieldtypeMediaManager found on the current page!');
					}

					$options['currentPage'] = $this->currentPage;
					$options['mediaManagerField'] = $this->mediaManagerField;

				}
				// tagging: some special options from inputs
				elseif($actionType == 'tag') {
					$options['tagMode'] = (int) $tagMode;
					$tags = $input->tags;
					$options['tags'] = $tags;
				}

				$data = $this->mmActions->actionMedia($actionType, $media, $options);
			}

			// auto-upload by JqueryFileUpload (file or drag and drop)
			elseif($uploads || $list === 'list' || $delete === 'delete') {

				// jfu options for processing ajax requests (not configs!)
				$processJFUAjaxOptions = $this->processJFUAjaxOptions();
				$data = $this->jfu->processJFUAjax($processJFUAjaxOptions);

				// if at least 1 upload successfull, check if creating media or leaving them in review folder
				// @note: 'count_total' and 'count_fail' set in JFU getResponse()
				if(isset($data['count_total']) && $data['count_total'] != $data['count_fail']) {
				//if($data['count_fail'] < $data['count_total']) {
					// uploads: check if 'add to media library + (un)publish' setting is in place
					$uploadAndCreate = isset($this->savedSettings['after'][0]) ? (int) $this->savedSettings['after'][0] : 2;
					if($uploads && ($uploadAndCreate === 1 || $uploadAndCreate === 2)) {
						if($uploadAndCreate === 1) $publish = 1;// media will be created and published
						$actionType = 'upload';// add to media library after an ajax request (immediately after a jfu event)
						/* @todo:
						unsure about this. For JFU anwhere for inputfield, should we the bypass $uploadAndCreate setting AND ALWAYS create? the whole purpose of that is to upload to the mm field. is there a conflict in this? with this setting, it means upload and create should always be on and no review, globally. with a bypass, at least the dashboard upload is still limited? we'll ask users; for now, we follow global, since we also follow noupload global setting!
						*/
						$options['actionType2'] = $actionType2;
						// @todo: refactor?! similar to insert above! maybe create method common to both?
						if($actionType2 == 'upload_insert') {
							// get the current page THAT CALLED Anywhere JFU
							// @todo: if nothing to add to, we need to tell users @note: however, the media could have still been created
							$p = $this->wire('pages')->get($currentPageID);
							if($p && $p->id > 0) $this->currentPage = $p;
							else {
								$data['message'] = 'error';
								$data['error'] = $this->_('No page found to add media to!');
							}
							// get the current media field (FieldtypeMediaManager/InputfieldMediaManager) on this page
							$f = $this->wire('fields')->get($mediaManagerFieldID);
							if($f && $f->id && $f->type instanceof FieldtypeMediaManager) $this->mediaManagerField = $f;
							else {
								$data['message'] = 'error';
								$data['error'] = $this->_('No instance of FieldtypeMediaManager found in the current page!');
							}

							$options['currentPage'] = $this->currentPage;
							$options['mediaManagerField'] = $this->mediaManagerField;
						}

						// @note: if 'after' is 1|2 it means we are not showing uploads (i.e. immediately adding to ML) which then means we are uploading to the private directory
						$options['dir'] = $processJFUAjaxOptions['privateUploadsDir'];
						// @note: the private directory! (since these are files that do not go for review; media is created for them directly)
						$options['thumb'] = $processJFUAjaxOptions['thumbsPrivateDir'];
						$options['publish'] = $publish;
						$options['after'] = $uploadAndCreate;// to help determine which $dir above to use (i.e. private vs. web-accessible)
						//$this->mmActions->actionMedia($actionType, null, $options);
						$data2 = $this->mmActions->actionMedia($actionType, null, $options);

						/* nothing else to do.
						$this->message()/$this->error() sent via actionMedia() &
						 below we json_encode and send $data */

					}// end check if creating media from uploads
				}// end check if NOT all media uploads failed
				// all uploads failed (no attempt to create media done)
				else {
					$data['message'] = 'error';
					$data['notice'] = $this->_('Media Manager: Could not add uploaded media to the Media Library. Check if uploaded files are valid and try again.');
				}

			}
			// move previously uploaded media to Media Manager Library
			elseif($moveToMediaLibrary == 'publish' || $moveToMediaLibrary == 'unpublished') {
				// jfu options for processing ajax requests (not configs!)
				$processJFUAjaxOptions = $this->processJFUAjaxOptions();
				$actionType = 'move';
				if($moveToMediaLibrary == 'publish') $publish = 1;// media will be created and published
				$options['publish'] = $publish;

				// mode: scanning
				// @note: if scanning, directory is different from uploads directory
				if($scan) {
					$options['dir'] = $this->scansDir;
					$options['thumb'] = '';
				}
				// mode: moving from uploads directory
				else {
					// @note: the web accessible directory! (since these are files that were awaiting review, hence listable for admins)
					$options['dir'] = $processJFUAjaxOptions['uploadsDir'];
					// @note: the web accessible thumbs directory! (since these are files were awaiting review)
					$options['thumb'] = $processJFUAjaxOptions['thumbsDir'];
				}

				$media = $input->jfu_files;
				$data = $this->mmActions->actionMedia($actionType, $media, $options);
			}
			// delete selected FTP'd files in scan folder
			elseif($delete == 'scan-delete') {
				$actionType = $delete;
				// @note: not needed since in this case we get a full path to the files as they may be in sub-directories in scans folder!
				//$options['dir'] = $this->scansDir;
				// @note: this is not applicable for scans!
				//$options['thumb'] = '';
				$media = $input->jfu_files;
				$data = $this->mmActions->actionMedia($actionType, $media, $options);
			}

			// error
			else {
				$data['message'] = 'error';
				$data['error'] = $this->_('Media Manager: An unknown error occured. Pleae try again.');
			}

			$data = count($data) ? array_merge($data, $data2) : $data;
			echo json_encode($data);
			exit;

		}// end if ajax

		// if not ajax, go to MM landing page
		else $this->session->redirect($this->wire('page')->url);

	}

	/**
	 * Options for passing on to JqueryFileupload processJFUAjax().
	 *
	 * @access protected
	 * @return array $processJFUAjaxOptions Options for processing jfu actions.
	 *
	 */
	protected function processJFUAjaxOptions() {

		$savedSettings = $this->savedSettings;

		$baseUploadsDir = $this->mediaUploadsDir;
		$baseUploadsURL = $this->mediaUploadsURL;

		$uploadsDir = $baseUploadsDir . 'jqfu/files/';// web accessible directory
		$thumbsDir = $baseUploadsDir . 'jqfu/files/thumbnails/';// ditto
		$uploadsURL = $baseUploadsURL . 'jqfu/files/';// ditto
		$thumbsURL = $baseUploadsURL . 'jqfu/files/thumbnails/';// ditto
		// we need a string acceptFileTypes. Will be converted to array before passing to WireUpload in jfu
		$exts = implode(' ', $this->mmUtilities->validExtensions());

		// check if unzipping files. if so, tell JFU
		$unzipFiles = $savedSettings['unzip_files'][0] == 1 ? true : false;

		// uploads: check if 'add to media library + (un)publish' setting is in place
		$uploadAndCreate = isset($savedSettings['after'][0]) ? (int) $savedSettings['after'][0] : 2;
		// if will manually add uploaded files to Media Library, then we show uploaded files
		if($uploadAndCreate === 3) $showUploaded = 1;
		// else we don't display uploaded files if after upload, files will immediately be added to Media Library
		else $showUploaded = 0;

		$processJFUAjaxOptions = array (
			'uploadsDir' => $uploadsDir,// @note: accessible only within admin
			'thumbsDir' => $thumbsDir,// ditto
			'uploadsURL' => $uploadsURL,// ditto
			'thumbsURL' => $thumbsURL,// ditto
			'privateUploadsDir' => $this->privateMediaUploadsDir,// @note: non-web-accessible
			'thumbsPrivateDir' => $this->privateMediaUploadsDir . 'thumbnails/',// jfu will force create if it doesn't exist
			'showUploaded' => $showUploaded,
			'responseType' => 2,
			'acceptFileTypes' => $exts,
			'uploadsDeletable' => 1,
			'createThumb' => true,
			'disableUploads' => $this->noUpload,
			'allowedImageMimeTypes' => $this->mmUtilities->allowedImageMimeTypes(),
			'allowedNonImageMimeTypes' => $this->mmUtilities->allowedNonImageMimeTypes(),
			'unzipFiles' => $unzipFiles,
		);

		return $processJFUAjaxOptions;

	}

	/* ######################### - PageLister STUFF - ######################### */

	/**
	 * Modify this Lister's parent InputfieldSelector instance.
	 *
	 * For results filtering.
	 * We hide specified fields from filters.
	 * @note: We are overriding parent::getInputfieldSelector().
	 *
	 * @access public
	 * @return string $gis InputfieldSelector string.
	 *
	 */
	public function getInputfieldSelector() {
		$gis = parent::getInputfieldSelector();// parent's InputfieldSelector
		// get custom setting for fields to be excluded & set to filter if user does not have permission  'media-manager-show-all-filters'
		if ($this->mediamanagerField && $this->mediamanagerField->excludeFields && !$this->user->hasPermission('media-manager-show-all-filters')) {
			$gis->set('exclude', "$gis->exclude, {$this->mediamanagerField->excludeFields}");
		}
		return $gis;

	}

	/**
	 * Find media in the Media Library.
	 *
	 * @access protected
	 * @return PageArray $results  Results (if found).
	 *
	 */
	protected function findMedia() {
		$gs = parent::getSelector();// selector saved in session by parentClass
		$results = parent::findResults($gs);
		return $results;
	}

	/**
	 * Display media in Media Library.
	 *
	 * @note: We are overriding parent::renderResults().
	 *
	 * @access protected
	 * @return string $out Markup of results.
	 *
	 */
	protected function renderResults() {
		$results = $this->findMedia();
		$fs = $this->wire('config')->debug ? $this->wire('sanitizer')->entities($this->finalSelector) : '';
		$out = $this->mmRender->renderMediaViews($results, $fs);
		return $out;
	}

	/**
	 * Change inputfield selector's label to match Media Manager context.
	 *
	 * Default label is 'What pages to show'.
	 * We override this.
	 * @note: We are overriding parent::buildFiltersForm().
	 *
	 * @access protected
	 * @return object $form Filters Form.
	 *
	 */
	protected function buildFiltersForm() {
		$form = parent::buildFiltersForm();
		$is = $form->get('filters');// @note: we are grabbing this forms child input (InputfieldSelector) by its name
		$is->label = $this->_('What media to show');// we want a custom label here
		return $form;
	}

	/**
	 * Execute the 'reset' action, which resets columns, filters, and anything else stored in the session.
	 *
	 * We are overriding parent::executeReset() to avoid redirecting to root || this process page.
	 * In our case, we are only resetting fitlers since we don't show columns, etc.
	 *
	 * @access public
	 *
	 */
	public function executeReset() {
		$segs = array('add', 'rte', 'link');
		$urlStr = $this->wire('input')->urlSegmentsStr ? $this->wire('input')->urlSegmentsStr . '/' : '';
		$modal = in_array($this->urlSeg1, $segs) ? '?modal=1' : '';// maintain modal status when in add or rte mode
		$url = $this->wire('page')->url . $urlStr . $modal;
		$this->resetLister();
		// won't work in this context
		// $this->message($this->_('All settings have been reset.'));
		$this->session->redirect($url);
	}

	/**
	 * Wraps markup from this module's execute methods into one parent div.
	 *
	 * Using this as a small helper method.
	 * Only used for media pages (audio, document, image and video executes()).
	 * The parent div is targeted in JS.
	 *
	 * @param string $markup Final markup from module's execute methods.
	 * @return string $out Final wrapped markup for Process Module page.
	 *
	 */
	public function getWRapper($markup) {
		$currentPageID = (int) $this->currentPage->id;// just to get '0' if in not in modal
		$mediaManagerFieldID = (int) $this->mediaManagerField->id;// - ditto -
		$out = "<div id='mm_main_wrapper_{$currentPageID}_{$mediaManagerFieldID}' class='mm_main_wrapper mm_modal' data-media-manager-field='{$mediaManagerFieldID}'>{$markup}</div>";
		return $out;
	}

	/* ######################### - MODULE CONFIG - ######################### */

	/**
	 * Module configuration interface.
	 *
	 * Displayed in module configuration screen. This is a ProcessWire method
	 * User configurable values stored in the database.
	 * Here we only use it to warn user to first run Media Manager cleanup utility before uninstaling the module
	 *
	 * @access public
	 * @return object $form Form to render.
	 *
	 */
	 public static function getModuleConfigInputfields(array $data) {

		// create the config screen
		$form = new InputfieldWrapper();

		$m = new InputfieldMarkup;
		$m->label = __('Uninstall Warning');

		$cleanupURL = '<a target="_blank" href="' . wire('config')->urls->admin . 'media-manager/cleanup/">' . __('Cleanup utility') . '</a>';

		$warning = '<h3 class="warning notes">' . __('Do not uninstall Media Manager until AFTER you have run the ') . $cleanupURL .
					__(' unless you only want to keep your Media Manager Pages without using the module.') . '</h3>';

		$m->attr('value', $warning);
		$form->add($m);

		return $form;

	 }

	/* ######################### - INSTALLERS - ######################### */

	/**
	 * Calls the Media Manager installer.
	 *
	 * @access private
	 * @param null|integer $mode Checks if running validator vs full installer.
	 *
	 */
	private function mmInstaller($mode) {

		// run Media Manager installer
		/*
			- installs 5 templates (1 for each media type child pages + 1 for the parent pages)
			- 5 fields (1 for each media type child pages + 1 for settings)
		 */

		require_once(dirname(__FILE__) . '/MediaManagerInstaller.php');

		$mmi = new MediaManagerInstaller();

		return $mmi->verifyInstall($mode);

	}

	/**
	 * Called once only when installing the module.
	 *
	 * Creates a page for this process and a permission for the module.
	 *
	 * @access public
	 *
	 */
	public function ___install() {


		// create ProcessMediaManager admin page and permission if MediaManagerInstaller was successful in its validation
		if($this->mmInstaller($mode = null) == true) {
			$page = new Page();
			$page->template = 'admin';
			$page->parent = $this->wire('pages')->get($this->wire('config')->adminRootPageID);
			$page->title = 'Media Manager';
			$page->name = self::PAGE_NAME;
			$page->process = $this;
			#$page->addStatus(Page::statusHidden);
			$page->save();

			$this->mmInstaller($mode = 1);// run MediaManagerInstaller

			// tell the user we created this page
			$this->message("Media Manager: Created page {$page->path}");
		}

		else throw new WireException($this->_('Media Manager: Installation aborted. Check and fix reported errors first.'));

		// create the permission 'media-manager' and 'media-manager-settings' to limit access to the module
		$perms = array(
			'media-manager' => $this->_('Use Media Manager'),
			'media-manager-settings' => $this->_('Edit Media Manager Settings'),
		);

		foreach ($perms as $k => $v) {
			$permission = $this->wire('permissions')->get($k);
			if (!$permission->id) {
				$p = new Permission();
				$p->name = $k;
				$p->title = $v;
				$p->save();
			}
		}

		// tell the user we created this module's permissions
		$this->message('Media Manager: Created new permissions media-manager and media-manager-settings.');

	}

	/**
	 * Called only when uninstalling the module.
	 *
	 * Uninstalls the module, deletes the process page and the permission that were created on install.
	 *
	 * @access public
	 *
	 */
	public function ___uninstall() {


		// find and delete the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->wire('modules')->getModuleID($this);
		// @note/@see executeCleanup()
		$page = $this->wire('pages')->get("template=admin, process=$moduleID, name=" . self::PAGE_NAME);
		// $page = $this->wire('pages')->get('template=admin, name='.self::PAGE_NAME);

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message($this->_('Media Manager: Deleted page ') . $page->path);
			$this->wire('pages')->delete($page);
		}

		// find and delete the 'media-manager' and 'media-manager-settings' permissions and let the user know
		$perms = array(
			'media-manager' => $this->_('Use Media Manager'),
			'media-manager-settings' => $this->_('Edit Media Manager Settings'),
		);

		foreach ($perms as $k => $v) {
			$permission = $this->wire('permissions')->get($k);
			if ($permission->id) {
				$permission->delete();
			}
		}

		// tell the user we created this module's permission
		$this->message('Media Manager: Deleted permissions media-manager and media-manager-settings.');

	}


}
