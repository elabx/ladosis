<?php namespace ProcessWire;

/**
* Media Manager: Fieldtype
*
* Fieldtype that stores Media Manager media attached to a page.
* References to 4 media types are stored: audio, file, image and video).
*
* @author Francis Otieno (Kongondo) <kongondo@gmail.com> kongondo.com
*
* This is a Copyrighted Commercial Module. Please do not distribute or host publicly. The license is not transferable.
*
* FieldtypeMediaManager for ProcessWire
* Copyright (C) 2015 by Francis Otieno
* Licensed under a Commercial Licence (see README.txt)
*
*/

class FieldtypeMediaManager extends FieldtypeMulti {

	public static function getModuleInfo() {
		return array(
			'title' => 'Media Manager (Fieldtype)',
			'author' => 'Francis Otieno (Kongondo)',
			'version' => 12,
			'href' => 'http://mediamanager.kongondo.com',
			'summary' => 'Media Manager: Field that stores references to 4 types of media (audio, file, image, video) for use in Media Manager.',
			'installs' => 'InputfieldMediaManager',
			'requires' => 'ProcessMediaManager',
			);
	}

	// the name of the instance (field) of this fieldtype
	public static $name;


	/**
	 * Initialize this Fieldtype
	 *
	 */
	public function init() {
		parent::init();
		$dir = dirname(__FILE__);
		require_once("$dir/MediaManager.php");
		require_once("$dir/MediaManagerArray.php");
		require_once("$dir/MediaManagerUtilities.php");
	}

	/**
	 * Return the required Inputfield used to populate a field of this type.
	 * These are properties that we want to be accessible to InputfieldMediaManager.
	 *
	 * @access public
	 * @return Inputfield $inputfield The Inputfield for this Field.
	 *
	 */
	public function getInputfield(Page $page, Field $field) {

		$inputfield = $this->wire('modules')->get("InputfieldMediaManager");

		// our inputfield requires a Page and Field
		$inputfield->setPage($page);// this is a method in InputfieldMediaManager
		$inputfield->setField($field);// - ditto -
		$inputfield->setMediaManagerUtiltities(new MediaManagerUtilities($page, $field));// - ditto -

		// @note: as stated above: we need this to be able to access the stored values in both the Input tab in the field settings and in the Inputfield
		// @see INPUT Tab
		$inputfield->set('modalLinkLabel', $field->modalLinkLabel);
		$inputfield->set('insertAndClose', $field->insertAndClose);
		$inputfield->set('enableUploadAnywhere', $field->enableUploadAnywhere);
		$inputfield->set('allowEditSelectedMedia', $field->allowEditSelectedMedia);
		$inputfield->set('showIcons', $field->showIcons);
		$inputfield->set('showColumns', $field->showColumns);
		$inputfield->set('audioCustomColumns', $field->audioCustomColumns);
		$inputfield->set('documentCustomColumns', $field->documentCustomColumns);
		$inputfield->set('imageCustomColumns', $field->imageCustomColumns);
		$inputfield->set('videoCustomColumns', $field->videoCustomColumns);

		// @see DETAILS Tab
		$inputfield->set('allowedMedia', $field->allowedMedia);// array
		$inputfield->set('maxFiles', $field->maxFiles);

		return $inputfield;

	}

	/**
	 * Return a blank ready-to-populate version of a field of this type
	 *
	 * @access public
	 * @return MediaManagerArray $mm A blank MediaManagerArray ready to populate.
	 *
	 */
	public function getBlankValue(Page $page, Field $field) {
		$mm = new MediaManagerArray($page);
		$mm->setTrackChanges(true);
		self::$name = $field->name;
		return $mm;
	}

	/**
	 * set the config option fields for this Field
	 * These appear in the 'Details' Tab when editing an instance of this Field
	 *
	 * @access public
	 * @return Inputfield $inputfields The Inputfield associated with this Media Manager Field.
	 *
	 */
	public function ___getConfigInputfields(Field $field) {

		$inputfields = parent::___getConfigInputfields($field);

		$modules = $this->wire('modules');

		/*
			@note:
				- allowed media types for this media manager field.
				- this setting superseded by global allowed media
		*/

		$globalDisallowedMedia = $this->getMediaManagerGlobalDisallowedMedia();

		$mediaOptions = array(
			'audio' => array(1, $this->_('Audio')),
			'document' => array(2, $this->_('Document')),
			'image' => array(3, $this->_('Image')),
			'video' => array(4, $this->_('Video')),
		);
		// @note: global settings supersede these. Only globally allowed media appear here
		$f = $modules->get('InputfieldCheckboxes');
		$f->attr('name', 'allowedMedia');
		$f->label = $this->_('Allowed Media Types');
		$f->description = $this->_('Check the box next to each media type that you would like this MediaManager field to store.');
		$f->notes = $this->_('If no option is checked, all four media types (audio, document, image, video) will be allowed. Please note that available options here are superseded by the global allowed media setting. Hence, globally disallowed media types are not listed here.');

		foreach ($mediaOptions as $key => $value) {
			if(in_array($key, $globalDisallowedMedia)) continue;
			$f->addOption($value[0], $value[1]);
		}

		$f->attr('value', $field->allowedMedia);

		$inputfields->add($f);

		// max files: overall (supersedes above four if set to value > 0)
		$f = $modules->get('InputfieldInteger');
		$f->attr('name', 'maxFiles');
		$f->attr('value', (int) $field->maxFiles);
		$f->attr('size', 4);
		$f->label = $this->_('Maximum Media Allowed');
		$f->description = $this->_('0=No limit');
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->append($f);

		return $inputfields;

	}

	/**
     * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
 	 *
     * @param Page $page
     * @param Field $field
     * @param string|int|array $value
     * @return string|int|array|object $value
     *
     */
	public function ___wakeupValue(Page $page, Field $field, $value) {

		// with 2D array of custom fields in media manager media templates
		$this->mediaPageFields = $this->getMediaPageFields();
		// array of field names NOT SET AS PROPERTIES
		$this->disallowedFields = $this->disallowedFields();

		// if for some reason we already get a valid value, then just return it
		if($value instanceof MediaManagerArray) return $value;

		// start a blank value to be populated (MediaManagerArray)
		$mm = $this->getBlankValue($page, $field);

		// if we were given a blank value, then we've got nothing to do: just return a blank MediaManagerArray
		if(empty($value) || !is_array($value)) return $mm;

		// create new MediaManager objects from each item in the array
		foreach($value as $v) {

			$m = new MediaManager();

			$version = '';

			// the id of the page with the media (not the one where the media is inserted/referenced!)
			$m->id = (int) $v['data'];// @note we are converting 'data' to 'media-manager->id'
			$m->type = (int) $v['type'];

			// audio
			if($m->type == 1) {
				$mediaField = 'media_manager_audio';
				$m->typeLabel = 'audio';
			}
			// document
			elseif($m->type == 2) {
				$mediaField = 'media_manager_document';
				$m->typeLabel = 'document';
			}
			// image (original)
			elseif($m->type == 3) {
				$mediaField = 'media_manager_image';
				$m->typeLabel = 'image';
			}
			// video
			elseif($m->type == 4) {
				$mediaField = 'media_manager_video';
				$m->typeLabel = 'video';
			}
			// image (variation of an original)
			elseif(strlen($m->type) > 1 && (int)substr($m->type, 0, 1) === 3) {
				$mediaField = 'media_manager_image';
				$version = (int) substr($m->type, 1);
				$m->typeLabel = 'image';
			}
			// @note: we skip media pages in trash AND unpublished
			$mediaPage = $this->wire('pages')->get("id=$m->id,status<" . Page::statusTrash . ",status<" . Page::statusUnpublished);
			if(!$mediaPage) continue;// if we didn't find the page, continue (maybe it was deleted)


			if($mediaPage->$mediaField == '') continue;// if no media on page, continue

			################# GET THE MEDIA OBJECT #################

			/* @note:
				- we want the media itself, NOT its page, to add it to our MediaManagerArray
				- the media can be a Pageimage or Pagefile
				- access the Field object that this file is part of: $media->page (PW API)
				- access the Page object that this file is part of: $media->fied (PW API)
				- access the Pagefiles WireArray that contains this file: $media->pagefiles (PW API)
			*/

			# 1. If we got a $version, we are dealing with a variation of an original image (e.g. cropped version)
			if($version) $m->media = $mediaPage->$mediaField->eq($version);
			# 2. Dealing with a single media file field OR multiple media image field
				/* @note:
					- in module context (when output formatting is OFF) file/image fields always behave as arrays.
					- we need first()
				*/
			elseif(($m->type == 3)||(!$page->of())) $m->media = $mediaPage->$mediaField->first();
			# 3. Dealing with a single media field and output formatting is on (true)
			else $m->media = $mediaPage->$mediaField;


			if(!$m->media) continue;// if media has been deleted, skip it

			$m->title = $mediaPage->title;

			/*
			@note: since we can now have multiple media in a media field, especially images (media_manager_image), devs might need access to the extra images. Above, we are only grabbing the first. So, to give access to the media, we need to assign to a different property. To preserve backward compatibility, we assign the whole field to the property mediaField, i.e:
				$m->mediaField = $mediaPage->media_manager_audio, etc
			*/

			$m->mediaField = $mediaPage->{"media_manager_{$m->typeLabel}"};

			$m = $this->setExtraMediaProperties($m, $mediaPage);

			$m->setTrackChanges(true);//track changes for individual media-manager
			$mm->add($m);// add to mm

			// if a one media allowed field, break
			if((int)$field->maxFiles == 1) break;

		}//end foreach $value as $v

		$mm->resetTrackChanges();// reset track changes for all mm

		return $mm;

	}

	/**
     * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
     *
     * @param Page $page
     * @param Field $field
     * @param string|int|array|object $value
     * @return string|int
     *
     */
	public function ___sleepValue(Page $page, Field $field, $value) {

		$sleepValue = array();

		// if we are given something other than an MediaManagerArray,
		// then just return a blank array
		if(!$value instanceof MediaManagerArray) return $sleepValue;

		// sort
		$value->sort('sort');

		// convert each MediaManager to an array within sleepValue
		foreach($value as $m) {
			$sleepValue[] = array(
				'data' => (int) $m->id, // @note: media-manager->id is becoming data which is a required column in a Fieldtype
				'type' => (int) $m->type,
			);
		}// end foreach $value as $m

		return $sleepValue;

	}

	/**
	 * Given a value, make it clean for storage within a Page
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {

		// if given a blank value, return a valid blank value
		if(empty($value)) return $this->getBlankValue($page, $field, $value);

		// if given something other than an MediaManagerArray, throw an error
		if(!$value instanceof MediaManagerArray) throw new WireException("Value set to field '$field->name' must be a MediaManagerArray");

		// @note that sanitization of individual fields within a given media-manager is already...
		// ...performed by the MediaManager::set() method, so we don't need to do anything else here

		return $value;

	}

	/**
	 * Format a value for output, called when a Page's outputFormatting is on
	 *
	 */
	public function formatValue(Page $page, Field $field, $value) {

		// we actually don't need to do anything in here since each MediaManager object
		// is doing this work in the MediaManager::get() method. But I've included this
		// comment here just to explain where that is taking place.

		#the idea here is to transform, where necessary, a db value for display in the input field or on a rendered page

		return $value;

	}

	/**
	 * Return the database schema that defines a MediaManager item
	 *
	 */
	public function getDatabaseSchema(Field $field) {

		$schema = parent::getDatabaseSchema($field);

		//'data' is a required field for any Fieldtype, and we're using it to represent our 'media-manager->row' field (column in db)
		$schema['data'] = 'INT NOT NULL DEFAULT 0';//we reuse this required field/column for pageID of page with the media
		$schema['type'] = 'TINYINT UNSIGNED NOT NULL';// 1=audio; 2=document; 3=image; 4=video; 3xxx=image-variation

		//indexes, for any fields that need to be searchable from selectors
		//make all our fields searchable
		$schema['keys']['data'] = 'KEY data(data)';// searchable data(id) = page->id of media->id
		$schema['keys']['type'] = 'KEY type(type)';//searchable type = $media->type

		return $schema;
	}

	/**
	 * Method called when the field is database-queried from a selector
	 *
	 */
	public function getMatchQuery($query, $table, $subfield, $operator, $value) {


		// If searching 'media' then assume our default (data) field
		if($subfield == 'media') {
			$subfield = 'data';
			//if we got a media=selection string, we assume it is a title
			if(!ctype_digit("$value") && strlen($value)) {
				//first get the page by name, then grab their ID
				$r = wire('pages')->get('name=' . $this->wire('sanitizer')->pageName($value));
				if($r and $r->id > 0) $value = $r->id;
			}

		}

		return parent::getMatchQuery($query, $table, $subfield, $operator, $value);

	}

	/**
	 * Get the global disallowed media.
	 *
	 * A blank array means all media are allowed globally.
	 *
	 * @access private
	 * @return array $globalDisallowedMedia Global disallowed media.
	 *
	 */
	private function getMediaManagerGlobalDisallowedMedia() {
		$media = array('audio', 'document', 'image', 'video');
		// get Media Manager settings
		$mediaManagerSettings = $this->wire('pages')->get("template=admin, name=media-manager")->child('template=media-manager-settings, include=hidden')->media_manager_settings;
		$savedSettings = json_decode($mediaManagerSettings, true);
		if(!is_array($savedSettings)) $savedSettings = array();
		$globalAllowedMedia = isset($savedSettings['allowed_media']['media']) ? $savedSettings['allowed_media']['media'] : $media;
		$globalDisallowedMedia = array_diff($media, $globalAllowedMedia);
		return $globalDisallowedMedia;
	}

	/**
	 * Set extra properties to MediaManager object.
	 *
	 * These are the extra columns added to the media page's template.
	 * We return all properties except those with invalid names.
	 * These are: 'id','title','type','typeLabel','media','permissions','roles'.
	 * @note: The properties are set irrespective of whether they are part of Custom Columns in ProcessMediaManager.
	 * It is assumed the user wants access to them in the frontend, hence their inclusion in the media template.
	 *
	 * @access private
	 * @param MediaManager $media MediaManager object to set extra properties to.
	 * @param Page $mediaPage The page where the media resides
	 * @return MediaManager $media The MediaManager object with extra properties.
	 *
	 */
    private function setExtraMediaProperties($media, $mediaPage) {
		$mediaPageFields = $this->mediaPageFields[$media->typeLabel];
		foreach ($mediaPageFields as $mediaProperty) {
			if(in_array($mediaProperty, $this->disallowedFields)) continue;
			if($mediaProperty == "media_manager_{$media->typeLabel}") {
				$media->mediaField = $mediaPage->{"media_manager_{$media->typeLabel}"};
			}
			else $media->{"$mediaProperty"} = $mediaPage->$mediaProperty;
		}
		return $media;
    }

	/**
	 * Get the names of fields in the respective media page templates.
	 *
	 * @note: We'll skip disallowed when setting properties.
	 *
	 * @access private
	 * @return array $mediaTemplatesFields Multi-dimensional array with respective media template's custom field names.
	 *
	 */
    private function getMediaPageFields() {

        $mediaTemplatesFields = array();
        $mediaTemplates = array('audio','document','image','video');

        foreach ($mediaTemplates as $mediaTemplate) {
            $template = $this->wire('templates')->get("media-manager-{$mediaTemplate}");
            if(!$template) continue;// error checking
            $mediaTemplatesFields[$mediaTemplate] = $template->fields->explode('name');
		}

		return $mediaTemplatesFields;

	}

	/**
	 * Return array of disallowed field names.
	 *
	 * This is so that we can skip them when setting extra properties to media objects.
	 *
	 * @access public
	 * @return array $disallowedFields Array of disallowed fields.
	 *
	 */
	private function disallowedFields() {
		// @note: we now allow this since users may want to have extra media in their media fields, say more than one image, and access them using eq(n), etc
		//$mediaManagerFields = array('title', 'media_manager_audio', 'media_manager_document','media_manager_image','media_manager_video');
		$mediaManagerProperties = array('id', 'type', 'typeLabel', 'media');
		$processWireFields= array('permissions', 'roles');
		//$disallowedFields= array_merge($mediaManagerFields, $mediaManagerProperties, $processWireFields);
		$disallowedFields= array_merge($mediaManagerProperties, $processWireFields);
		return $disallowedFields;
	}


}
